{"version":3,"sources":["components/ContactMe.tsx","img/pp.png","img/Resume.pdf","components/AboutMe.tsx","components/SideBar.tsx","components/AssetTracker/BoringTracker.tsx","components/AssetTracker/CryptoTracker.tsx","components/AssetTracker/Countdown.tsx","components/AssetTracker/AssetTracker.tsx","components/index.tsx","App.jsx","serviceWorker.js","index.js"],"names":["ContactMe","useStyles","makeStyles","theme","header","textAlign","marginBottom","spacing","item","width","borderRadius","marginTop","image","height","imagecontainer","display","justifyContent","icons","transform","maintext","margin","root","AboutMe","classes","className","Typography","variant","src","pp","Button","href","target","rel","Pdf","to","component","MUILink","SideBar","useState","isOpen","setIsOpen","reload","setReload","useEffect","localStorage","getItem","IconButton","onClick","SwipeableDrawer","anchor","open","onClose","onOpen","List","Pages","map","page","ListItem","button","Link","link","ListItemIcon","children","icon","ListItemText","primary","name","Switch","checked","window","location","split","onChange","setItem","apiinput","table","searchresult","padding","BoringTracker","isLoading","setIsLoading","apiKey","setAPIKey","keyword","setKeyword","showSearchResults","setShowSearchResults","searchResults","setSearchResults","showForm","setShowForm","formStuff","setFormStuff","formQuantity","setFormQuantity","formPrice","setFormPrice","boringData","setBoringData","errorMessage","setErrorMessage","refresh","setRefresh","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","kw","a","axios","get","then","resp","data","bestMatches","calculatePL","starting","end","i","line","quantity","price","parseFloat","toFixed","getPrice","ticker","result","JSON","parse","console","log","undefined","tickerData","high","low","pl","stringify","fetchLocalData","style","color","TextField","label","size","value","e","disabled","queryTicker","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","row","index","symbol","type","region","Paper","elevation","Grid","container","xs","fullWidth","newData","push","splice","combobox","overflowY","arrangeHorizontally","CryptoTracker","setCurrencies","cryptoCurrencies","setCryptoCurrencies","selectCurrency","cryptoData","setCryptoData","showAddEntry","setShowAddEntry","formCrypto","setFormCrypto","formValue","setFormValue","formPrincipal","setFormPrincipal","crypto","principal","editValuesIndex","setEditValuesIndex","calculateNetProfit","total","displayPrincipal","toLocaleString","maximumFractionDigits","getCurrentPrice","fiat","amount","fetchCurrency","tempcurrencies","c","id","fetchCryptoCurrency","fiatCurrencies","Object","keys","rates","includes","fetchStoredValues","temp","currPrice","currentPrice","setTimeout","EditValuesButtons","colSpan","customInput","onValueChange","values","floatValue","prefix","paddingRight","Autocomplete","options","renderInput","params","Countdown","timings","lse_close","Date","UTC","getFullYear","getMonth","getDate","lse_open","nyse_open","nyse_close","timeleft","endDate","difference","timeLeft","days","hours","minutes","seconds","radioSelect","setRadioSelect","remainingTime","setRemainingTime","RadioGroup","event","defaultValue","direction","justify","sm","FormControlLabel","control","Radio","alignItems","AssetTracker","App","basename","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37b35e05.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Paper,\n  TextField,\n  Grid,\n  Typography,\n  Button,\n  Link,\n  makeStyles,\n} from '@material-ui/core';\n\nconst ContactMe = () => {\n  return <div></div>;\n};\n\nexport default ContactMe;\n// https://docs.google.com/forms/d/e/1FAIpQLSeRk58rRnbE1XDd_6RZ6i9RIPTDPZT9YgsQ_4B7-Ff0mqQE3w/viewform?usp=pp_url&entry.963742205=Sherman&entry.1053435119=leesherman@live.com.sg&entry.1110637641=86601996&entry.63678808=you+rock!\n// https://docs.google.com/forms/d/e/1FAIpQLSeRk58rRnbE1XDd_6RZ6i9RIPTDPZT9YgsQ_4B7-Ff0mqQE3w/formResponse?usp=pp_url&entry.963742205=Name&entry.1053435119=Email&entry.1110637641=Mobile+Number&entry.63678808=Question\n","export default __webpack_public_path__ + \"static/media/pp.d83a0ba8.png\";","export default __webpack_public_path__ + \"static/media/Resume.5f132bec.pdf\";","import { Grid, makeStyles, Typography, Button, Link as MUILink } from '@material-ui/core';\nimport React from 'react';\nimport pp from '../img/pp.png';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport MenuBookIcon from '@material-ui/icons/MenuBook';\nimport Pdf from '../img/Resume.pdf';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    header: { textAlign: 'center', marginBottom: theme.spacing(4) },\n    item: {\n      width: '100%',\n      textAlign: 'center',\n      borderRadius: '5px',\n      marginTop: '10px',\n    },\n    image: {\n      width: '300px',\n      height: 'auto',\n    },\n    imagecontainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginBottom: theme.spacing(3),\n    },\n    icons: { transform: 'scale(2)' },\n    maintext: { width: '50%', margin: '5% auto 0 auto', textAlign: 'center' },\n    root: { marginBottom: '20%', width: '100vw' },\n  };\n});\n\nconst AboutMe = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h3\" className={classes.header}>\n        Welcome to my developer profile.\n      </Typography>\n      <div className={classes.imagecontainer}>\n        <img src={pp} className={classes.image} />\n      </div>\n      <div className={classes.imagecontainer}>\n        <Button href=\"https://github.com/shermanleejm\" target=\"_blank\" rel=\"noopener\">\n          <GitHubIcon className={classes.icons} />\n        </Button>\n        <Button href=\"https://www.linkedin.com/in/shrmnl/\" target=\"_blank\" rel=\"noopener\">\n          <LinkedInIcon className={classes.icons} />\n        </Button>\n        <Button href={Pdf} target=\"_blank\" rel=\"noopener\">\n          <MenuBookIcon className={classes.icons} />\n        </Button>\n      </div>\n      <div className={classes.maintext}>\n        <Typography>\n          I make stuff. I have an asset tracker that you can play with{' '}\n          <Link to=\"/tracker\" component={MUILink}>\n            here\n          </Link>\n          .\n        </Typography>\n        <br />\n        <Typography>\n          You can visit my github profile by clicking the icon above.{' '}\n        </Typography>\n        <br />\n        <Typography>\n          I am currently working on a blockchain network that focuses on tamper-proof\n          <br />\n          contracts and distributed programming, feel free to hit me up using the{' '}\n          <Link to=\"/contact-me\" component={MUILink}>\n            contact me page\n          </Link>\n          .\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default AboutMe;\n","import {\n  ListItem,\n  List,\n  SwipeableDrawer,\n  IconButton,\n  ListItemText,\n  ListItemIcon,\n  Switch,\n  makeStyles,\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Pages } from './index';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: {\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n  };\n});\n\nconst SideBar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [reload, setReload] = useState(false);\n  const classes = useStyles();\n\n  useEffect(() => {\n    localStorage.getItem('homepage');\n  }, [reload]);\n\n  return (\n    <div className={classes.root}>\n      <IconButton onClick={() => setIsOpen(true)}>\n        <MenuIcon />\n      </IconButton>\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={isOpen}\n        onClose={() => setIsOpen(false)}\n        onOpen={() => {\n          setIsOpen(true);\n        }}\n      >\n        <List>\n          {Pages.map((page) => {\n            return (\n              <ListItem\n                button\n                key={page.name}\n                component={Link}\n                to={page.link}\n                onClick={() => setIsOpen(false)}\n              >\n                <ListItemIcon children={page.icon} />\n                <ListItemText primary={page.name} />\n              </ListItem>\n            );\n          })}\n        </List>\n      </SwipeableDrawer>\n      <span>\n        set as homepage{' '}\n        <Switch\n          checked={\n            localStorage.getItem('homepage') === window.location.href.split('#')[1]\n          }\n          onChange={() => {\n            if (localStorage.getItem('homepage') === window.location.href.split('#')[1]) {\n              localStorage.setItem('homepage', '');\n            } else {\n              localStorage.setItem('homepage', window.location.href.split('#')[1]);\n            }\n            setReload(!reload);\n          }}\n        />\n      </span>\n    </div>\n  );\n};\n\nexport default SideBar;\n","import {\n  Button,\n  makeStyles,\n  TextField,\n  Typography,\n  Table,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  IconButton,\n  Grid,\n  Paper,\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CheckIcon from '@material-ui/icons/Check';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    header: { margin: '3% 0 3% 0' },\n    root: { margin: '0 4% 10% 4%' },\n    apiinput: { width: '60%', margin: '0 0 3% 0' },\n    table: { margin: '0 0 3% 0' },\n    searchresult: { padding: '4%', marginBottom: '4%' },\n  };\n});\n\nconst BoringTracker = () => {\n  const classes = useStyles();\n  const [isLoading, setIsLoading] = useState(true);\n  const [apiKey, setAPIKey] = useState() as any;\n  const [keyword, setKeyword] = useState('');\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [formStuff, setFormStuff] = useState() as any;\n  const [formQuantity, setFormQuantity] = useState() as any;\n  const [formPrice, setFormPrice] = useState('');\n  const [boringData, setBoringData] = useState([]) as any;\n  const [errorMessage, setErrorMessage] = useState() as any;\n  const [refresh, setRefresh] = useState(false);\n\n  function shuffle(array: any[]) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  useEffect(() => {\n    async function getPrice(ticker: string) {\n      let result = {};\n      await axios\n        .get(\n          `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${ticker}&apikey=${apiKey}`\n        )\n        .then((resp) => {\n          result = resp.data['Global Quote'];\n        });\n      return result;\n    }\n\n    async function fetchLocalData() {\n      let item = JSON.parse(localStorage.getItem('apikey') || '[]');\n      console.log(item);\n      if (item.length > 0) {\n        setAPIKey(item);\n      } else {\n        setAPIKey('1111111');\n      }\n      item = JSON.parse(localStorage.getItem('boring') || '[]');\n      if (item.length > 0) {\n        for (let line of item) {\n          let tickerData: any = await getPrice(line.ticker);\n          if (tickerData === undefined) {\n            setErrorMessage('Alpha Vantage only allows 5 requests every minute.');\n            setIsLoading(false);\n            return;\n          }\n          line.high = parseFloat(tickerData['03. high']);\n          line.low = parseFloat(tickerData['04. low']);\n          line.open = parseFloat(tickerData['02. open']);\n          line.pl = parseFloat(\n            (((tickerData['02. open'] - line.price) / line.price) * 100).toFixed(2)\n          );\n        }\n        localStorage.setItem('boring', JSON.stringify(shuffle(item)));\n        setBoringData(item);\n      }\n\n      setErrorMessage(undefined);\n      setIsLoading(false);\n    }\n    console.log('calling useEffect on Boring Tracker');\n    fetchLocalData();\n  }, [refresh]);\n\n  async function queryTicker(kw: string) {\n    await axios\n      .get(\n        `https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${kw}&apikey=${apiKey}`\n      )\n      .then((resp) => {\n        setSearchResults(resp.data.bestMatches);\n      });\n  }\n\n  function calculatePL() {\n    let starting = 0;\n    let end = 0;\n    for (let i = 0; i < boringData.length; i++) {\n      let line: any = boringData[i];\n      starting += line.quantity * line.price;\n      end += line.quantity * line.open;\n    }\n    return parseFloat((((end - starting) / starting) * 100).toFixed(2));\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography style={{ color: 'red' }}>\n        {errorMessage !== undefined && errorMessage}\n      </Typography>\n\n      <Typography variant=\"h4\" className={classes.header}>\n        Boring{' '}\n        <span style={{ color: calculatePL() > 0 ? 'green' : 'red' }}>\n          {calculatePL() > 0 && '+'}\n          {calculatePL()}%\n        </span>\n      </Typography>\n\n      <TextField\n        label=\"Alpha Vantage API key\"\n        size=\"small\"\n        value={apiKey}\n        onChange={(e) => setAPIKey(e.target.value)}\n        className={classes.apiinput}\n      />\n      <Button\n        onClick={() => {\n          localStorage.setItem('apikey', JSON.stringify(apiKey));\n        }}\n      >\n        save api key\n      </Button>\n\n      <TextField\n        label=\"Add new boring equity\"\n        size=\"small\"\n        value={keyword}\n        onChange={(e) => setKeyword(e.target.value)}\n        className={classes.apiinput}\n      />\n      <Button\n        disabled={!keyword}\n        onClick={() => {\n          queryTicker(keyword);\n          setShowSearchResults(true);\n        }}\n      >\n        search\n      </Button>\n\n      {showSearchResults && keyword !== '' && (\n        <TableContainer className={classes.table}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Symbol</TableCell>\n                <TableCell>Name</TableCell>\n                <TableCell>Type</TableCell>\n                <TableCell>Region</TableCell>\n                <TableCell>Correct?</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {searchResults.map((row, index) => {\n                return (\n                  <TableRow key={index}>\n                    <TableCell>{row['1. symbol']}</TableCell>\n                    <TableCell>{row['2. name']}</TableCell>\n                    <TableCell>{row['3. type']}</TableCell>\n                    <TableCell>{row['4. region']}</TableCell>\n                    <TableCell>\n                      <IconButton\n                        onClick={() => {\n                          setFormStuff({\n                            symbol: row['1. symbol'],\n                            name: row['2. name'],\n                            type: row['3. type'],\n                            region: row['4. region'],\n                          });\n                          setShowForm(true);\n                          setShowSearchResults(false);\n                        }}\n                      >\n                        <CheckIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n\n      {showForm && (\n        <Paper className={classes.searchresult} elevation={3}>\n          <Grid container spacing={3}>\n            <Grid item xs={4}>\n              Symbol: {formStuff.symbol}\n            </Grid>\n            <Grid item xs={8}>\n              Name: {formStuff.name}\n            </Grid>\n            <Grid item xs={4}>\n              Type: {formStuff.type}\n            </Grid>\n            <Grid item xs={8}>\n              Region: {formStuff.region}\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Quantity\"\n                type=\"number\"\n                // step={0.001}\n                value={formQuantity}\n                onChange={(e) => {\n                  setFormQuantity(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <TextField\n                label=\"Price\"\n                type=\"number\"\n                // step={0.001}\n                value={formPrice}\n                onChange={(e) => {\n                  setFormPrice(e.target.value);\n                }}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <Button\n                fullWidth\n                onClick={() => {\n                  let newData = {\n                    ticker: formStuff.symbol,\n                    quantity: formQuantity,\n                    price: formPrice,\n                  };\n                  boringData.push(newData);\n                  localStorage.setItem('boring', JSON.stringify(shuffle(boringData)));\n                  setShowForm(false);\n                }}\n              >\n                submit\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      )}\n\n      {!isLoading && (\n        <TableContainer className={classes.table}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Ticker</TableCell>\n                <TableCell>Quantity</TableCell>\n                <TableCell>Cost</TableCell>\n                <TableCell>Open</TableCell>\n                <TableCell>High</TableCell>\n                <TableCell>Low</TableCell>\n                <TableCell>P/L (%)</TableCell>\n                <TableCell>Delete</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {boringData.map((row: any, index: number) => {\n                return (\n                  <TableRow key={index}>\n                    <TableCell>{row.ticker}</TableCell>\n                    <TableCell>{row.quantity}</TableCell>\n                    <TableCell>{row.price}</TableCell>\n                    <TableCell>{row.open}</TableCell>\n                    <TableCell>{row.high}</TableCell>\n                    <TableCell>{row.low}</TableCell>\n                    <TableCell style={{ color: row.pl > 0 ? 'green' : 'red' }}>\n                      {row.pl > 0 && '+'}\n                      {row.pl}\n                    </TableCell>\n                    <TableCell>\n                      <IconButton\n                        onClick={() => {\n                          boringData.splice(index, 1);\n                          localStorage.setItem(\n                            'boring',\n                            JSON.stringify(shuffle(boringData))\n                          );\n                          setIsLoading(true);\n                        }}\n                      >\n                        <DeleteForeverIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n      <Button\n        onClick={() => {\n          setRefresh(!refresh);\n          setBoringData(shuffle(boringData));\n        }}\n      >\n        refresh\n      </Button>\n    </div>\n  );\n};\n\nexport default BoringTracker;\n","import {\n  makeStyles,\n  TextField,\n  Typography,\n  Button,\n  IconButton,\n  TableHead,\n  Table,\n  TableRow,\n  TableCell,\n  TableContainer,\n  TableBody,\n} from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\nimport axios from 'axios';\nimport NumberFormat from 'react-number-format';\nimport React, { useState, useEffect } from 'react';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: { margin: '0 4% 0 4%' },\n    combobox: { padding: '3% 0 3% 0' },\n    header: { margin: '0 0 1% 0' },\n    table: { overflowY: 'scroll' },\n    arrangeHorizontally: { display: 'inline-block', textAlign: 'center' },\n  };\n});\nconst CryptoTracker = () => {\n  const classes = useStyles();\n  const [currencies, setCurrencies] = useState([]) as any;\n  const [cryptoCurrencies, setCryptoCurrencies] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectCurrency, setSelectCurrency] = useState('SGD');\n  const [cryptoData, setCryptoData] = useState([]) as any;\n  const [showAddEntry, setShowAddEntry] = useState(false);\n  const [formCrypto, setFormCrypto] = useState() as any;\n  const [formValue, setFormValue] = useState() as any;\n  const [formPrincipal, setFormPrincipal] = useState() as any;\n  const [editValuesIndex, setEditValuesIndex] = useState({\n    crypto: -1,\n    quantity: -1,\n    principal: -1,\n  });\n  useEffect(() => {\n    // get current sell price\n    async function getCurrentPrice(crypto: string, fiat: string) {\n      let result = 0;\n      await axios\n        .get(`https://api.coinbase.com/v2/prices/${crypto}-${fiat}/sell`)\n        .then((resp) => {\n          result = parseFloat(resp.data.data.amount);\n        });\n      return result;\n    }\n    // get currencies\n    async function fetchCurrency() {\n      let result = [] as any;\n      await axios.get('https://api.coinbase.com/v2/currencies').then((resp) => {\n        let tempcurrencies = [];\n        for (let c of resp.data.data) {\n          tempcurrencies.push(c.id);\n        }\n        result = tempcurrencies;\n        setCurrencies(tempcurrencies);\n      });\n      return result;\n    }\n    async function fetchCryptoCurrency(fiatCurrencies: string[]) {\n      let result = [] as any;\n      await axios\n        .get('https://api.coinbase.com/v2/exchange-rates?currency=BTC')\n        .then((resp) => {\n          Object.keys(resp.data.data.rates).map((item) => {\n            if (!fiatCurrencies.includes(item)) {\n              result.push(item);\n            }\n          });\n          setCryptoCurrencies(result);\n        });\n    }\n    // get stored values\n    async function fetchStoredValues() {\n      let x = await fetchCurrency();\n      fetchCryptoCurrency(x);\n      let temp = JSON.parse(localStorage.getItem('crypto') || \"\");\n      if (temp !== \"\") {\n        for (let line of temp) {\n          let currPrice = await getCurrentPrice(line.name, selectCurrency);\n          line.pl = parseFloat(\n            (((currPrice * line.value - line.principal) / line.principal) * 100).toFixed(\n              2\n            )\n          );\n          line.currentPrice = currPrice;\n        }\n      } else {\n        temp = [];\n      }\n      setCryptoData(temp);\n      localStorage.setItem('crypto', JSON.stringify(temp));\n      setIsLoading(false);\n    }\n    setTimeout(() => {\n      fetchStoredValues();\n    }, 60000);\n    fetchStoredValues();\n  }, [isLoading]);\n\n  function calculateNetProfit(): number {\n    let total = 0;\n    let pl = 0;\n    for (let line of cryptoData) {\n      pl += (line.principal * line.pl) / 100;\n      total += line.principal;\n    }\n    return parseFloat(((pl / total) * 100).toFixed(2));\n  }\n\n  function displayPrincipal(principal: any) {\n    principal = principal.toLocaleString(undefined, { maximumFractionDigits: 2 });\n    return principal;\n  }\n\n  const EditValuesButtons: React.FC<{}> = () => {\n    return (\n      <div className={classes.arrangeHorizontally}>\n        <IconButton\n          onClick={() => {\n            setEditValuesIndex({\n              crypto: -1,\n              quantity: -1,\n              principal: -1,\n            });\n            localStorage.setItem('crypto', JSON.stringify(cryptoData));\n            setIsLoading(true);\n          }}\n        >\n          <CheckCircleIcon />\n        </IconButton>\n        <IconButton\n          onClick={() => {\n            setEditValuesIndex({\n              crypto: -1,\n              quantity: -1,\n              principal: -1,\n            });\n          }}\n        >\n          <CancelIcon />\n        </IconButton>\n      </div>\n    );\n  };\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" className={classes.header}>\n        Crypto {'  '}\n        <span style={{ color: calculateNetProfit() > 0 ? 'green' : 'red' }}>\n          {calculateNetProfit() > 0 ? '+' : ''}\n          {calculateNetProfit()}%\n        </span>\n      </Typography>\n\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>\n                <Typography>Currency (Current Price)</Typography>\n              </TableCell>\n              <TableCell colSpan={editValuesIndex.quantity !== -1 ? 3 : 1}>\n                <Typography>Quantity</Typography>\n              </TableCell>\n              <TableCell colSpan={editValuesIndex.principal !== -1 ? 3 : 1}>\n                <Typography>Principal</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>Current</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>Profit/Loss (%)</Typography>\n              </TableCell>\n              <TableCell>\n                <Typography>Delete</Typography>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!isLoading &&\n              cryptoData.map((crypto: any, index: any) => {\n                return (\n                  <TableRow>\n                    <TableCell>\n                      {`${crypto.name} (${selectCurrency}${displayPrincipal(\n                        crypto.currentPrice\n                      )})`}\n                    </TableCell>\n                    <TableCell colSpan={editValuesIndex.quantity !== -1 ? 3 : 1}>\n                      {editValuesIndex.quantity === index ? (\n                        <div style={{ width: '30vw' }}>\n                          <NumberFormat\n                            customInput={TextField}\n                            value={crypto.value}\n                            onValueChange={(values) => {\n                              let { floatValue } = values;\n                              let temp = cryptoData;\n                              temp[index].value = floatValue;\n                              setCryptoData(temp);\n                            }}\n                          />\n                          <EditValuesButtons />\n                        </div>\n                      ) : (\n                        <Typography\n                          onClick={() => {\n                            setFormValue(crypto.value);\n                            setEditValuesIndex({\n                              crypto: -1,\n                              quantity: index,\n                              principal: -1,\n                            });\n                          }}\n                        >\n                          {crypto.value}\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell colSpan={editValuesIndex.principal !== -1 ? 3 : 1}>\n                      {editValuesIndex.principal === index ? (\n                        <div style={{ width: '30vw' }}>\n                          <NumberFormat\n                            customInput={TextField}\n                            prefix={selectCurrency}\n                            value={crypto.principal}\n                            onValueChange={(values) => {\n                              let { floatValue } = values;\n                              let temp = cryptoData;\n                              temp[index].principal = floatValue;\n                              setCryptoData(temp);\n                            }}\n                          />\n\n                          <span className={classes.arrangeHorizontally}>\n                            <IconButton\n                              onClick={() => {\n                                setEditValuesIndex({\n                                  crypto: -1,\n                                  quantity: -1,\n                                  principal: -1,\n                                });\n                                localStorage.setItem(\n                                  'crypto',\n                                  JSON.stringify(cryptoData)\n                                );\n                                setIsLoading(true);\n                              }}\n                            >\n                              <CheckCircleIcon />\n                            </IconButton>\n                            <IconButton\n                              onClick={() => {\n                                setEditValuesIndex({\n                                  crypto: -1,\n                                  quantity: -1,\n                                  principal: -1,\n                                });\n                              }}\n                            >\n                              <CancelIcon />\n                            </IconButton>\n                          </span>\n                        </div>\n                      ) : (\n                        <Typography\n                          onClick={() => {\n                            setEditValuesIndex({\n                              crypto: -1,\n                              principal: index,\n                              quantity: -1,\n                            });\n                            setFormPrincipal(crypto.principal);\n                          }}\n                        >\n                          {selectCurrency}\n                          {displayPrincipal(crypto.principal)}\n                        </Typography>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <Typography>\n                        {selectCurrency}\n                        {(\n                          parseFloat(crypto.currentPrice) * parseFloat(crypto.value)\n                        ).toLocaleString(undefined, { maximumFractionDigits: 2 })}\n                      </Typography>\n                    </TableCell>\n                    <TableCell style={{ color: crypto.pl > 0 ? 'green' : 'red' }}>\n                      <Typography>\n                        {crypto.pl > 0 && '+'}\n                        {crypto.pl || ''}\n                      </Typography>\n                    </TableCell>\n                    <TableCell>\n                      <IconButton\n                        onClick={() => {\n                          cryptoData.splice(index, 1);\n                          localStorage.setItem('crypto', JSON.stringify(cryptoData));\n                          setIsLoading(true);\n                        }}\n                      >\n                        <DeleteForeverIcon />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            {showAddEntry && (\n              <TableRow>\n                <TableCell style={{ paddingRight: '5%' }}>\n                  <Autocomplete\n                    className={classes.combobox}\n                    options={cryptoCurrencies}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"Crypto\"\n                        size=\"small\"\n                      />\n                    )}\n                    onChange={(e, value) => setFormCrypto(value)}\n                  />\n                </TableCell>\n                <TableCell>\n                  <NumberFormat\n                    style={{ width: '25vw' }}\n                    customInput={TextField}\n                    value={formValue}\n                    onValueChange={(values) => {\n                      let { floatValue } = values;\n                      setFormValue(floatValue || \"\");\n                    }}\n                  />\n                </TableCell>\n                <TableCell>\n                  <NumberFormat\n                    style={{ width: '25vw' }}\n                    customInput={TextField}\n                    prefix={selectCurrency}\n                    value={formPrincipal}\n                    onValueChange={(values) => {\n                      let { floatValue } = values;\n                      setFormPrincipal(floatValue);\n                    }}\n                  />\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      {showAddEntry ? (\n        <div>\n          <Button\n            onClick={() => {\n              if (\n                formCrypto !== undefined &&\n                formPrincipal !== undefined &&\n                formValue !== undefined\n              ) {\n                cryptoData.push({\n                  name: formCrypto,\n                  value: formValue,\n                  principal: formPrincipal,\n                });\n                localStorage.setItem('crypto', JSON.stringify(cryptoData));\n                setIsLoading(true);\n              }\n              setShowAddEntry(false);\n            }}\n          >\n            submit\n          </Button>\n          <Button\n            onClick={() => {\n              setShowAddEntry(false);\n            }}\n          >\n            cancel\n          </Button>\n        </div>\n      ) : (\n        <Button onClick={() => setShowAddEntry(true)}>+ add item</Button>\n      )}\n      <Button onClick={() => setIsLoading(true)}>Refresh</Button>\n      <hr />\n    </div>\n  );\n};\nexport default CryptoTracker;\n","import { Grid, Radio, RadioGroup, Typography, FormControlLabel } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\nconst Countdown = () => {\n  const timings: any = {\n    lse_close: Date.UTC(\n      new Date().getFullYear(),\n      new Date().getMonth(),\n      new Date().getDate(),\n      15,\n      30,\n      0\n    ),\n    lse_open: Date.UTC(\n      new Date().getFullYear(),\n      new Date().getMonth(),\n      new Date().getDate(),\n      7,\n      0,\n      0\n    ),\n    nyse_open: Date.UTC(\n      new Date().getFullYear(),\n      new Date().getMonth(),\n      new Date().getDate(),\n      13,\n      30,\n      0\n    ),\n    nyse_close: Date.UTC(\n      new Date().getFullYear(),\n      new Date().getMonth(),\n      new Date().getDate(),\n      20,\n      0,\n      0\n    ),\n  };\n\n  function timeleft(endDate: any) {\n    endDate = new Date(endDate);\n    let difference = endDate - +new Date();\n    let timeLeft = {};\n    if (difference > 0) {\n      timeLeft = {\n        days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n        minutes: Math.floor((difference / 1000 / 60) % 60),\n        seconds: Math.floor((difference / 1000) % 60),\n      };\n    }\n    return timeLeft;\n  }\n  const [radioSelect, setRadioSelect] = useState('lse_open');\n  const [remainingTime, setRemainingTime] = useState(timeleft(timings[radioSelect])) as any;\n\n  useEffect(() => {\n    setTimeout(() => {\n      setRemainingTime(timeleft(timings[radioSelect]));\n    }, 1000);\n  });\n\n  function displayTimer() {\n    if (Object.keys(remainingTime).length === 0) {\n      return <Typography>The market is {radioSelect.split('_')[1]}.</Typography>;\n    } else {\n      return (\n        <Grid container direction=\"row\" alignItems=\"center\" justify=\"center\" spacing={1}>\n          <Grid item>\n            <Typography>{remainingTime.hours}H</Typography>\n          </Grid>\n          <Grid item>\n            <Typography>{remainingTime.minutes}M</Typography>\n          </Grid>\n          <Grid item>\n            <Typography>{remainingTime.seconds}S</Typography>\n          </Grid>\n        </Grid>\n      );\n    }\n  }\n\n  return (\n    <div style={{ textAlign: 'center', margin: \"2% 0\" }}>\n      <RadioGroup\n        value={radioSelect}\n        onChange={(event) => setRadioSelect(event.target.value)}\n        defaultValue=\"lse_open\"\n      >\n        <Grid container direction=\"row\" justify=\"center\">\n          {[\n            { value: 'lse_open', name: 'LSE Opening' },\n            { value: 'lse_close', name: 'LSE Closing' },\n            { value: 'nyse_open', name: 'NYSE Opening' },\n            { value: 'nyse_close', name: 'NYSE Closing' },\n          ].map((row) => {\n            return (\n              <Grid item xs={6} sm={3}>\n                <FormControlLabel\n                  value={row.value}\n                  label={row.name}\n                  control={<Radio />}\n                />\n              </Grid>\n            );\n          })}\n        </Grid>\n      </RadioGroup>\n\n      <div style={{ margin: 'auto' }}>{displayTimer()}</div>\n    </div>\n  );\n};\n\nexport default Countdown;\n","import { makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport BoringTracker from './BoringTracker';\nimport CryptoTracker from './CryptoTracker';\nimport Countdown from './Countdown';\n\nconst useStyles = makeStyles((theme) => {\n  return {\n    root: { margin: '0 0% 0 0%' },\n  };\n});\n\nconst AssetTracker = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <CryptoTracker />\n      <Countdown />\n      <BoringTracker />\n    </div>\n  );\n};\n\nexport default AssetTracker;\n","import React from 'react';\nimport ContactMe from './ContactMe';\nimport AboutMe from './AboutMe';\nimport SideBar from './SideBar';\nimport AssetTracker from './AssetTracker/AssetTracker';\nimport CallIcon from '@material-ui/icons/Call';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\n\nconst Pages = [\n  {\n    name: 'About Me',\n    link: '/about-me',\n    component: AboutMe,\n    icon: <AccountCircleIcon />,\n  },\n  { name: 'Contact Me', link: '/contact-me', component: ContactMe, icon: <CallIcon /> },\n  {\n    name: 'Asset Tracker',\n    link: '/tracker',\n    component: AssetTracker,\n    icon: <TrendingUpIcon />,\n  },\n];\n\nexport { ContactMe, AboutMe, SideBar, Pages, AssetTracker };\n","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { SideBar, Pages } from './components';\n\nconst App = () => {\n  return (\n    <div>\n      <HashRouter basename={'/'}>\n        <SideBar />\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => {\n              return localStorage.getItem('homepage') === null ||\n                localStorage.getItem('homepage') === '' ? (\n                <Redirect to=\"/about-me\" />\n              ) : (\n                <Redirect to={localStorage.getItem('homepage')} />\n              );\n            }}\n          />\n          {Pages.map((page) => {\n            return <Route exact path={page.link} component={page.component} />;\n          })}\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />,document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}