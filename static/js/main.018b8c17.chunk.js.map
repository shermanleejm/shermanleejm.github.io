{"version":3,"sources":["components/Resume.pdf","components/Profile.js","components/ContactMe.js","components/ApplicationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","state","Paper","color","elevation","style","padding","Typography","variant","Link","href","Pdf","target","Component","ContactMe","backgroundcolor","ApplicationBar","menuItems","home","icon","displayName","contactMe","isDrawerOpen","oldState","this","setState","Object","keys","map","key","ListItem","ListItemIcon","ListItemText","primary","Grid","container","item","flexGrow","Button","disableElevation","disableFocusRipple","disableRipple","onclick","toggleDrawer","Homepage","pages","changeDisplayPage","pageName","displayPage","isLoaded","currentPage","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","main","secondary","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,oC,qNC8B5BC,E,kDAzBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOC,MAAM,YAAYC,UAAW,EAAGC,MAAO,CAAEC,QAAS,KACvD,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,0BACyB,8BAEzB,kBAACD,EAAA,EAAD,CAAYC,QAAQ,MAApB,oCACA,6BACA,kBAACD,EAAA,EAAD,CAAYC,QAAQ,KAApB,4DAC2D,kBAACC,EAAA,EAAD,CAAMC,KAAMC,IAAKC,OAAO,UAAxB,UAD3D,2B,GAfYC,aCcPC,E,kDAdb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAOa,gBAAgB,mB,GATPF,a,4GCuETG,E,kDArDb,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IAaRiB,UAAY,CACVC,KAAM,CAAEC,KAAM,kBAAC,IAAD,MAAgBC,YAAa,WAC3CC,UAAW,CAAEF,KAAM,kBAAC,IAAD,MAAeC,YAAa,eAd/C,EAAKnB,MAAQ,CACXqB,cAAc,GAHC,E,2DAQjB,IAAIC,EAAWC,KAAKvB,MACpBuB,KAAKC,SAAS,CACZH,cAAeC,EAASD,iB,oCASb,IAAD,OAUZ,OARAI,OAAOC,KAAKH,KAAKP,WAAWW,KAAI,SAACC,GAC/B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAcC,QAAS,EAAKhB,UAAUY,GAAf,WALhB,K,+BAYL,IAAD,OACP,OACE,6BACE,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAAC9B,MAAO,CAAEC,QAAS,KAChC,kBAAC4B,EAAA,EAAD,CAAME,MAAI,IACV,kBAAC,IAAD,MACA,kBAAC7B,EAAA,EAAD,CAAYF,MAAO,CAAEgC,SAAU,KAC/B,kBAACC,EAAA,EAAD,CACEC,kBAAgB,EAChBC,oBAAkB,EAClBC,eAAa,EACbC,QAAS,kBAAM,EAAKC,iBAEpB,kBAAC,IAAD,a,GA9CiB9B,aC8Bd+B,E,kDAlCb,WAAY5C,GAAQ,IAAD,8BACjB,cAAMA,IAIR6C,MAAQ,CACN3B,KAAM,kBAAC,EAAD,MACNG,UAAW,kBAAC,EAAD,OAPM,EAWnByB,kBAAoB,SAACC,GACnB,EAAKtB,SAAS,CACZuB,YAAaD,KAXf,EAAK9C,MAAQ,CAAEgD,UAAU,EAAOD,YAAa,QAF5B,E,qDAkBjB,OACE,yBAAK3C,MAAO,CAAEgC,SAAU,IACtB,kBAAC,EAAD,CACES,kBAAmBtB,KAAKsB,kBACxBI,YAAa1B,KAAKvB,MAAM+C,cAE1B,6BACE,kBAACzC,EAAA,EAAD,CAAYC,QAAQ,MACjBgB,KAAKqB,MAAMrB,KAAKvB,MAAM+C,oB,GA3BZnC,a,gBCHHsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPzB,QAAS,CACP0B,KAAM,WAERC,UAAW,CACTD,KAAM,cAKZE,IAASC,OACP,kBAAC,IAAD,CAAkBN,MAAOA,GACvB,kBAACO,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.018b8c17.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Resume.67b2575b.pdf\";","import React, { Component } from \"react\";\nimport { Paper, Card, Typography, Link } from \"@material-ui/core\";\nimport Pdf from \"./Resume.pdf\";\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Paper color=\"secondary\" elevation={0} style={{ padding: 20 }}>\n          <Typography variant=\"h1\">\n            Hi. My name is Sherman.<br></br>\n          </Typography>\n          <Typography variant=\"h2\">Welcome to my developer profile.</Typography>\n          <br></br>\n          <Typography variant=\"p\">\n            This site is still under maintenance, here is my updated <Link href={Pdf} target=\"_blank\">resume</Link> in\n            the meantime. \n          </Typography>\n          \n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default Profile;\n","import React, { Component } from \"react\";\nimport { Paper } from \"@material-ui/core\";\n\nclass ContactMe extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div>\n        <Paper backgroundcolor=\"secondary\"></Paper>\n      </div>\n    );\n  }\n}\n\nexport default ContactMe;\n","import React, { Component } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  SwipeableDrawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Paper,\n  Grid,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport CodeIcon from \"@material-ui/icons/Code\";\n\nclass ApplicationBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDrawerOpen: false,\n    };\n  }\n\n  toggleDrawer() {\n    var oldState = this.state;\n    this.setState({\n      isDrawerOpen: !oldState.isDrawerOpen,\n    });\n  }\n\n  menuItems = {\n    home: { icon: <PersonIcon />, displayName: \"Profile\" },\n    contactMe: { icon: <PhoneIcon />, displayName: \"Contact Me\" },\n  };\n\n  displayList() {\n    var result = [];\n    Object.keys(this.menuItems).map((key) => {\n      return (\n        <ListItem>\n          <ListItemIcon></ListItemIcon>\n          <ListItemText primary={this.menuItems[key][\"icon\"]} />\n        </ListItem>\n      );\n    });\n    return result;\n  }\n\n  render() {\n    return (\n      <div>\n        <Grid container style={{ padding: 10 }}>\n          <Grid item></Grid>\n          <CodeIcon />\n          <Typography style={{ flexGrow: 1 }} />\n          <Button\n            disableElevation\n            disableFocusRipple\n            disableRipple\n            onclick={() => this.toggleDrawer()}\n          >\n            <MenuIcon />\n          </Button>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default ApplicationBar;\n","import React, { Component } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  IconButton,\n  Typography,\n  Button,\n  Paper,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Profile from \"./components/Profile\";\nimport ContactMe from \"./components/ContactMe\";\n\nimport ApplicationBar from \"./components/ApplicationBar\";\n\nclass Homepage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isLoaded: false, displayPage: \"home\" };\n  }\n\n  pages = {\n    home: <Profile />,\n    contactMe: <ContactMe />,\n  };\n\n  //callback function\n  changeDisplayPage = (pageName) => {\n    this.setState({\n      displayPage: pageName,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ flexGrow: 1 }}>\n        <ApplicationBar\n          changeDisplayPage={this.changeDisplayPage}\n          currentPage={this.state.displayPage}\n        />\n        <div>\n          <Typography variant=\"h6\">\n            {this.pages[this.state.displayPage]}\n          </Typography>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Homepage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#808080\",\n    },\n    secondary: {\n      main: \"#005500\",\n    },\n  },\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}